{"version":3,"sources":["constants.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["networkURLs","alcyone","pmf","pme","itn","App","useState","polyWallet","setPolyWallet","proof","setProof","address","setAddress","api","setApi","did","setDid","undefined","uidSet","setUidSet","network","setNetwork","error","setInternalError","ticker","setTicker","uid","setUid","setError","disappear","setTimeout","setDisappearingError","useEffect","_accounts","accounts","length","console","log","encodeAddress","decodeAddress","Error","Promise","resolve","then","web3Enable","exts","meshExts","filter","ext","name","wallet","subscribe","get","url","ApiPromise","provider","WsProvider","types","schema","rpc","isReady","query","identity","keyToIdentityIds","linkedKeyInfo","isEmpty","toString","isSet","data","handleChange","event","preventDefault","target","value","handleUidChange","provideUid","a","provide","catch","provideUidFromDid","crypto","mockUIdHex","process_create_mocked_investor_uid","uuidStringify","hexToU8a","isDev","Body","onClick","type","onChange","requestProof","generateProof","JSON","stringify","message","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5cf6a86a.chunk.js","sourcesContent":["export const networkURLs: Record<string, string> = {\n  alcyone: 'wss://alcyone-rpc.polymesh.live',\n  pmf: 'wss://pmf.polymath.network',\n  pme: 'wss://pme.polymath.network',\n  itn: 'wss://itn-rpc.polymesh.live',\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { web3Enable } from '@polkadot/extension-dapp';\nimport { encodeAddress, decodeAddress } from '@polkadot/util-crypto';\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport schema from './polymesh_schema.json';\nimport { hexToU8a } from '@polkadot/util';\nimport { stringify as uuidStringify } from 'uuid';\nimport { networkURLs } from './constants';\nimport { InjectedAccount } from '@polkadot/extension-inject/types';\n\nfunction App() {\n  const [polyWallet, setPolyWallet] = useState<any>(null);\n  const [proof, setProof] = useState<string>('');\n  const [address, setAddress] = useState<string>('');\n  const [api, setApi] = useState<ApiPromise | undefined>();\n  const [did, setDid] = useState<string | undefined>();\n  const [uidSet, setUidSet] = useState<boolean | undefined>(undefined);\n  const [network, setNetwork] = useState<string | undefined>();\n  const [error, setInternalError] = useState<Error | undefined>();\n  const [ticker, setTicker] = useState<string>('');\n  const [uid, setUid] = useState<string>('');\n  \n\n  const setError = (error: Error, disappear: boolean = false) => {\n    setInternalError(error);\n    disappear && setTimeout(() => setInternalError(undefined), 3000);\n  }\n\n  const setDisappearingError = (error: Error) => setError(error, true);\n\n  const reset = () => {\n    setDid(undefined);\n    setProof('');\n    setInternalError(undefined);\n    setTicker('');\n    setUid('');\n    setUidSet(undefined);\n  }\n\n\n  useEffect(() => {\n    const _accounts = (accounts: InjectedAccount[]) => {\n      if (accounts && accounts.length) {\n        console.log('__accounts', accounts);\n        // @TODO Fractal\n        // Recode address with ITN prefix (or Alcyone's, according to selected network).\n        const address = encodeAddress(decodeAddress(accounts[0].address), 12);\n        setAddress(address);\n      }\n      else {\n        setError(new Error('No accounts found in wallet extension'));\n        return;\n      }\n    }\n\n    \n    if (!polyWallet) {\n      (new Promise((resolve) => {\n        // @TODO Fractal\n        // There's a chance the wallet's injected API is not ready as soon as DOM loads.\n        // Force delay web3Enable.\n        setTimeout(() => resolve(null), 1000)\n      })).then(() => {\n        web3Enable('Mock uID Provider').then((exts) => {\n          const meshExts = exts.filter(ext => ext.name === 'polywallet')\n          console.log('>>>> Extension', meshExts)\n\n          if (!meshExts.length) {\n            setError(new Error(`Please install Polymesh wallet extension from Chrome store`));\n            return;\n          }\n\n          const wallet = meshExts[0];\n          setPolyWallet(wallet);\n\n          // @ts-ignore\n          wallet.network.subscribe((network) => {\n            console.log('setNetwork', network.name)\n            setNetwork(network.name);\n          });\n\n          // @ts-ignore\n          wallet.network.get().then(network => setNetwork(network.name));\n\n          // @TODO Fractal\n          // Replace calls to web3AccountsSubscribe and web3Accounts with \n          // the following calls, respectively.\n          // Note that we cannot specify the ss58Format in this case, so we'll\n          // have to recode addresses before consumption.\n          wallet.accounts.subscribe(_accounts);\n          wallet.accounts.get().then(_accounts);\n        })\n      });\n    }\n  }, [polyWallet]);\n\n  useEffect(() => {\n    if (network) {\n      reset();\n\n      const url = networkURLs[network];\n      if (!url) {\n        setError(new Error(`Unknown network: ${network}`));\n      }\n\n\n      const apiPromise = new ApiPromise({\n        provider: new WsProvider(url),\n        types: schema.types,\n        rpc: schema.rpc,\n      });\n\n      apiPromise.isReady.then((api) => {\n        setApi(api);\n      });\n    }\n  }, [ network ])\n\n  useEffect(() => {\n    if (api && address) {\n      api.query.identity.keyToIdentityIds(address).then((linkedKeyInfo) => {\n        if (!linkedKeyInfo.isEmpty) {\n          setDid(linkedKeyInfo.toString());\n        }\n      })\n    }\n    \n  }, [ api, address ])\n\n  useEffect(() => {\n    if (!!address && !!network && polyWallet) {\n      polyWallet.uid.isSet().then((data: boolean) => {\n        setUidSet(data)\n      });\n    }\n  }, [address, network, polyWallet])\n\n  const generateProof = (polyWallet: any) => {\n    if (!ticker.length) {\n      setError(new Error('\"Ticker\" is required'), true);\n      return;\n    }\n    polyWallet.uid.requestProof({ticker })\n      .then((data: any) => {\n        console.log('Data', data);\n        setProof(data.proof);\n      }, setDisappearingError)\n      .catch(setDisappearingError);\n  }\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    setTicker(event.target.value);\n  }\n\n  const handleUidChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    setUid(event.target.value);\n  }\n\n  const provideUid = async (polyWallet: any, did: string, uid: string) => {\n    console.log('>>> uid', uid);\n\n    // @TODO Fractal\n    // Make sure to show any errors thrown by uid.provide.\n    polyWallet.uid.provide({\n      uid,\n      did,\n      network\n    }).then(console.log, setDisappearingError).catch(setDisappearingError);\n  }\n\n  const provideUidFromDid = async (polyWallet: any, did: string) => {\n    console.log('Generating uID...');\n    const crypto = await import('@polymathnetwork/confidential-identity')\n    const mockUIdHex = `0x${crypto.process_create_mocked_investor_uid(did)}`;\n    const uid = uuidStringify(hexToU8a(mockUIdHex));\n\n    console.log('>>> uid', uid);\n\n    polyWallet.uid.provide({\n      uid,\n      did,\n      network\n    }).then(console.log, setDisappearingError).catch(setDisappearingError);\n  }\n\n  const isDev = network !== 'itn';\n\n  const Body = () => {\n    if (polyWallet && api) {\n      return (\n        <>\n          <p>\n            Network: {network || 'unknown'}\n          </p>\n          <p>\n            User address: {address || 'unknown'}\n          </p>\n          <p>\n            DID: {did || 'none'}\n          </p>\n          { uidSet !== undefined && <p>\n            UID: {uidSet ? 'true' : 'false'}\n          </p> }\n          { did && \n          <>\n            { isDev && <button  onClick={() => provideUidFromDid(polyWallet, did)}>\n                Generate a dummy uID and import it to Polymesh wallet\n              </button>\n            }\n            <p>\n              <input name='uid' value={uid} type='text' onChange={handleUidChange} />\n              <button onClick={() => provideUid(polyWallet, did, uid)}>Enter uID and import it to Polymesh wallet</button>\n            </p>\n            <p>\n              <input name='ticker' value={ticker} type='text' onChange={handleChange} />\n              <button onClick={() => generateProof(polyWallet)}>Use stored uID to generate proof</button>\n            </p>\n          </>\n          } <br />\n          { proof && <span>Proof: {JSON.stringify(proof, null, 3)} </span> }\n          { error && <span>{error.message}</span>}\n        </>\n      )\n    }\n    else if (error) {\n      return <span>{error.message}</span>\n    }\n    return <div>Initalizing API instance ...</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Body />\n      </header>\n    </div> \n  );\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}